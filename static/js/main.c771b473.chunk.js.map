{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","todosArray","useState","todo","setTodo","setState","btnText","setBtnText","getArrayFromLS","localStorage","getItem","inputPlaceholder","document","querySelector","placeholder","buttonSubmit","btnSubmit","style","backgroundColor","editTodo","e","todoId","target","closest","dataset","id","JSON","parse","forEach","userTodo","index","splice","setItem","stringify","deleteTodo","className","onSubmit","preventDefault","push","uuid","type","value","onChange","onClick","map","key","data-id","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c771b473.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport { MdDeleteForever,  } from \"react-icons/md\";\nimport { BiEdit } from \"react-icons/bi\";\nimport {GoNote} from \"react-icons/go\";\nimport uuid from 'react-uuid';\n\nimport './App.css';\n\n\nfunction App() {\n  const [todo, setTodo] = useState('');\n  let  [,setState]=useState();\n  const [btnText, setBtnText] = useState('Add Todo');\n\n  let todosArray;\n  const getArrayFromLS = localStorage.getItem('todosArray');\n  \n  const inputPlaceholder = () => {\n    const input = document.querySelector('.input');\n    input.placeholder = (todo === '') ? \"Input field can't be empty\": \"Add Todo\";\n  };\n  \n  const handleEvent = (e) => {\n    e.preventDefault();\n    if(todo === ''){\n      inputPlaceholder();\n    }else if(getArrayFromLS == null){\n      todosArray = [];\n      todosArray.push({\n        todo,\n        id: uuid()\n      });\n      localStorage.setItem('todosArray', JSON.stringify(todosArray));\n      inputPlaceholder();\n\n      setTodo(\"\");\n    }else{\n      todosArray = JSON.parse(getArrayFromLS);\n      todosArray.push({\n        todo,\n        id: uuid()\n      });\n      localStorage.setItem('todosArray', JSON.stringify(todosArray));\n      inputPlaceholder();\n      \n      setTodo(\"\");\n    };\n    buttonSubmit();\n  };\n\n  const buttonSubmit = () => {\n    const btnSubmit = document.querySelector('.btnSubmit');\n\n    if(btnSubmit.style.backgroundColor === '#45CE30'){\n      btnSubmit.style.backgroundColor = '#45CE30';\n    }else{\n      btnSubmit.style.backgroundColor = '#8B78E6';\n    }\n  }\n\n  //changing submit button value to Add Todo\n  const btnValue = () => {\n    setBtnText('Edit Todo' ? 'Add Todo': 'Add Todo');\n\n    buttonSubmit();\n  }\n/* \n  //creating single function for edit and delete todo is because I want to obey DRY principle. //creating these but it didn't workout.\n  \n  const editAndDeleteTodoAccordingly = e => {\n    const todoId = e.target.closest('li').dataset.id;\n    todosArray = JSON.parse(getArrayFromLS);\n    todosArray.forEach((userTodo, index) => {\n     if(todoId === userTodo.id){\n\n        todosArray.splice(index, 1);\n        localStorage.setItem('todosArray', JSON.stringify(todosArray));\n        \n        if(btnText === 'Edit Todo'){\n          setTodo(userTodo.todo);\n        }else{\n          setState({});\n        }\n\n      }\n    });\n  } */\n\n  //editing particular todo\n  const editTodo = e => {\n    setBtnText('Edit Todo');\n    document.querySelector('.btnSubmit').style.backgroundColor = 'Green';\n\n    const todoId = e.target.closest('li').dataset.id;\n    todosArray = JSON.parse(getArrayFromLS);\n    todosArray.forEach((userTodo, index) => {\n     if(todoId === userTodo.id){\n\n        todosArray.splice(index, 1);\n        localStorage.setItem('todosArray', JSON.stringify(todosArray));\n        \n        setTodo(userTodo.todo);\n      }\n    });    \n  }\n\n  //deleting particular todo\n  const deleteTodo = e => {\n   \n    const todoId = e.target.closest('li').dataset.id;\n    todosArray = JSON.parse(getArrayFromLS);\n\n    todosArray.forEach((userTodo, index) => {\n     if(todoId === userTodo.id){\n\n      todosArray.splice(index, 1);\n      localStorage.setItem('todosArray', JSON.stringify(todosArray));\n        \n        setState({});\n      }\n    });    \n  };\n\n  // clear all todos from UI and localstorage\n  const clearList = () => {\n    todosArray = JSON.parse(getArrayFromLS);\n    todosArray.splice(0, todosArray.length);\n    localStorage.setItem('todosArray', JSON.stringify(todosArray));\n    setState({});\n  }\n\n  return (\n    <div className=\"container\"> \n      <h2>Todo Input</h2>\n      <form onSubmit={handleEvent}>\n        <span className=\"span\"><GoNote /></span>\n        <input \n          type=\"text\" \n          className=\"input\" \n          placeholder=\"Add Todo\"\n          value={todo}\n          onChange={e => setTodo(e.target.value)}\n          />\n        <button className=\"btnSubmit\" onClick={btnValue}>{btnText}</button>\n      </form>\n      <div>\n        <h2>Todo List</h2>\n        <ul className=\"ul\">\n          \n          {\n            JSON.parse(getArrayFromLS) ? (\n              JSON.parse(getArrayFromLS).map(({todo, id}) => (\n                <li className=\"li\" key={id} data-id={id}>\n                  <span className=\"text\">{todo}</span>\n                  <span>\n                      <span className=\"edit\" onClick={editTodo}><BiEdit /></span>\n                      <span className=\"delete\" onClick={deleteTodo}><MdDeleteForever /></span>\n                  </span>\n                </li>\n              ))\n            ) : ('')\n          }\n        </ul>\n        <button className=\"btn\" onClick={clearList}>Clear List</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}